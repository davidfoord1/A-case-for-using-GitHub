[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A case for using GitHub",
    "section": "",
    "text": "Why you should be using GitHub\nA(nother) case for using GitHub for data analysis projects, from the perspective of an NHS England data analyst. My team started to transition projects on to GitHub last year, and this is why I‚Äôm glad we did."
  },
  {
    "objectID": "index.html#what-is-github-anyway",
    "href": "index.html#what-is-github-anyway",
    "title": "A case for using GitHub",
    "section": "What is GitHub, anyway?",
    "text": "What is GitHub, anyway?\nGitHub is a suite of products centered around the version control system Git. It offers:\n\nA place to store and share projects, in repositories with complete control over who has access. It‚Äôs easy to download a copy of a project, make changes and upload a revision. It‚Äôs a shared source-of-truth on the cloud.\nA record of changes made to the repository, including who made them and when; great for recovery, audits or just understanding how the project changed over time. You name and describe changes so that it‚Äôs easy to understand what‚Äôs been done.\nMultiple branches of one project being worked on in parallel. You can work safely and separately on features and combine them. By having a distinct final/publishing branch (usually main), you can protect the quality and completeness of the output product.\nPeer review in your regular workflow. Pull Requests and Code Reviews are key features. When you‚Äôre happy with a change you‚Äôve made in a branch, you can make a request for your work to be pulled/merged into the main branch. This can then be reviewed by someone, who can add comments, request changes or approve and merge. This is really valuable, because it adds a natural step for feedback and quality assurance into the process.\n\nAll of that is available for FREE, and that‚Äôs not everything1, but hopefully it is enough to pique your interest.\n\nThat sounds like a lot of extra steps just to save my work‚Ä¶\nWell, yes, it is. It‚Äôs saving, but more deliberate, with more quality assurance built-in, records for recovery and audit, proper support for multiple branches of work. It is a longer process; it‚Äôs a more thoughtful process; it‚Äôs a better process. In fact, it‚Äôs not a longer process, it takes more time up front but saves a lot over the mid-to-long-term. I don‚Äôt think I can stress enough how beneficial the extra steps are, particularly in making your work reproducible.\n\n\nGitHub for Reproducible Analytical Pipelines (RAP)\nAs a summary of why reproducible pipelines are important: the more manual steps like copy-pasting in a process there are, the more time it will take to complete, the more risk there will be for error, and the less scalable it will be for extending and repeating the process. It‚Äôs good to automate as much as possible, and products like GitHub go hand-in-hand with tackling these issues:\nFrom the NHS Digital levels of RAP framework, which sets out a list of requirements for making a good pipeline, look at the baseline (bronze) points:\n\n\nCode is version controlled (see Git basics and using Git collaboratively guides).\nCode has been peer reviewed.\nCode is published in the open and linked to & from accompanying publication (if relevant).\nData produced by code in an open-source language (e.g., Python, R, SQL).\nRepository includes a README.md file (or equivalent) that clearly details steps a user must follow to reproduce the code.\n\n\nGitHub directly implements or supports all of these. As you should know by now, it implements version control, peer review and publishing code publicly. It supports working with a broad variety of languages as well as encouraging READMEs by default, presenting them as guides on repository home pages."
  },
  {
    "objectID": "index.html#thats-great-in-theory-but-what-its-like-in-practice",
    "href": "index.html#thats-great-in-theory-but-what-its-like-in-practice",
    "title": "A case for using GitHub",
    "section": "That‚Äôs great in theory, but what it‚Äôs like in practice?",
    "text": "That‚Äôs great in theory, but what it‚Äôs like in practice?\nLike I said, I‚Äôm really glad the team I‚Äôm in started making this move -\n\nNow we can collaborate much more safely, in ways that were not possible with our previous setup using OneDrive/SharePoint. It‚Äôs easy to work on something in your own branch without worrying about messing the real thing up, and then it shows you the exact differences when you want to combine on them.\nIntroducing code review has been a boon for learning in the team. We‚Äôre not just getting things done well enough to work. We‚Äôre getting feedback, we‚Äôre improving, we‚Äôre making things more maintainable. This comes from both getting your code reviewed and from doing the reviewing.\nCode review has managed to catch a few mistakes before they got moved into building a project.\nIn a case where a change didn‚Äôt work in practice, we were able to revert it.\nIt has been quick and easy to get code running for different people and on different locations like remote desktops.\n\nThat being said, although the differences are clearly set out, conflicts can arise and resolving them scales in difficulty with the complexity of the changes. So, it‚Äôs still generally recommended to have only one branch work on one file at a time.\n\nGetting to grips with the tools\nThere was a bit of learning and setting up to do to get started, but plenty of guides on how to do it. There are lots of tools to potentially use, the most friendly being apps like GitHub Desktop, or perhaps the integrated functionality in development environments like VSCode. Best is to just pick one that seems comfortable to you, find the relevant documentation and guidance, and then run with it.\nOnce you get the hang of if it, there is a fairly simple and consistent rhythm of creating feature branches, making/saving/committing changes to files, pulling from the main branch and pushing to the feature branch, before submitting for review.\nIt‚Äôs easy to see where changes have been made\nWhen a commit is made the exact changes are recorded, which can be displayed in various ways, usually with a + for added lines and - for removed lines. Being so explicit with the changes is the main reason why merging different changes together is made so easy, because you know exactly what is happening.\n\n\n\nAdditions in GitHub Desktop"
  },
  {
    "objectID": "index.html#the-drive-and-support-in-government-and-the-nhs",
    "href": "index.html#the-drive-and-support-in-government-and-the-nhs",
    "title": "A case for using GitHub",
    "section": "The drive and support in government and the NHS",
    "text": "The drive and support in government and the NHS\nThe Goldacre review goes in to quite some (non-technical) detail on why reproducible pipelines are a great opportunity for improvement in NHS analytical work. It recommends the adoption of RAP practices as the default:\n\nit is crucial that the core working practices, such as sharing code, are implemented as a norm throughout the system, because of the problems that closed working can create around quality, safety, usability, credibility, and review.\n\nThe review stresses the importance of tools and services like GitHub2 to meet the minimum requirements of data pipelines being shared openly to anyone for review and re-use with an audit trail using version control.\nThe same is said in many places, here are some others in additions to the the NHS Digital resources already shared:\n\nThe GOV.UK Service Manual advises making code publicly available in an open internet source code repository.\nThe Government Analysis Function‚Äôs best practice guidance includes a Guide to Version Control with Git and a Peer Review Guide.\nThe Office of National Statistics reiterates the NHS Digital position.\n\n\nGitHub and the NHS so far\nThe Open Source Healthcare Statistics page shows how many public repositories there are from various healthcare organisations. It‚Äôs been growing quickly in recent years! They give links to all the repositories, if you‚Äôre interested in a browse (including NHS Digital and NHS England). Of particular note, I think, among that list are the communities building around Open Source for healthcare professionals like the NHS R Community and the NHS Python Community3.\nSo, do you see the benefits of Open Code?"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "A case for using GitHub",
    "section": "",
    "text": "üí° You did notice you‚Äôre at a github.io address, right?‚Ü©Ô∏é\nüîç GitHub is mentioned 39 times in the review.‚Ü©Ô∏é\nThat was a lot of links. Are you clicking any of them? Go check them out - they‚Äôre great! Go for it! Seriously, stop reading what I‚Äôm writing. I‚Äôm getting self-conscious now. Or you can go to the next page, I guess ü§∑‚Äç‚ôÇ‚Ü©Ô∏é"
  },
  {
    "objectID": "open_code.html#why-publish-your-code",
    "href": "open_code.html#why-publish-your-code",
    "title": "A case for Open Code",
    "section": "Why publish your code?",
    "text": "Why publish your code?\nPut from the perspective of good practice as the default, can you justify not publishing your code? Here are the main benefits of Open Code:\n\nIt‚Äôs more efficient - Sharing and reusing code reduces the duplication and burden of work. Changes may be needed for specific audiences, but how many of the same data tasks are being carried out again and again across national, regional and local healthcare teams?\nIt encourages good practice - If you know others can see your work you‚Äôre more likely to care about it being good work, and thus end up with a healthier and more maintainable code base.\nIt‚Äôs more transparent - If you‚Äôre publicly-funded and working with the public‚Äôs data, why shouldn‚Äôt your methodologies be available publicly for others to check, reuse and build on?\nIt‚Äôs good for collaboration - we can learn from each other, both across departments and from external users.\n\nBut Open Code isn‚Äôt beneficial to me personally!\nIncorrect! Sorry, I just really want to reiterate those points. If you write something to be reproducible by someone else, it‚Äôs going to be more reproducible by you in the future, or there may be less need for you to do it. If you open yourself to, yes - criticism, you open yourself to help and improvement. If you engage with the open-source community you can and will learn, challenge and teach, growing your wealth of skills, knowledge and experiences.\n\nAgain, there is a great deal of government and NHS support\nNone of that came from just me, I was mostly just ticking off the points made by the NHS Digital RAP Community of practice on How to Publish your Code in the Open.\nThe Government‚Äôs Digital Service Standard (and therefore the NHS Digital Service Standard‚Äôs) 12th principle states that all publicly funded code should be open, reusable and available under appropriate licences."
  },
  {
    "objectID": "open_code.html#addressing-security-concerns",
    "href": "open_code.html#addressing-security-concerns",
    "title": "A case for Open Code",
    "section": "Addressing security concerns",
    "text": "Addressing security concerns\nYou can choose what files get included in your GitHub repository. We choose to share the code and documentation but none of the data or other sensitive info like API keys.\n\nBe clear what is actually sensitive or not\nI‚Äôm just going to be copying here because it‚Äôs really well put by the GOV.UK Service Manual:\n\nThere are very few examples of code that must not be published in the open.\n\nA helpful quick list is provided by the government cyber security guidance:\n\nClosed code\nYou should keep some data and code closed, including:\n\nkeys and credentials\nalgorithms used to detect fraud\nunreleased policy\n\n\n\nOpen code\nYou should open all other code. This includes:\n\nconfiguration code\ndatabase schema\nsecurity-enforcing code\n\n\n\n\nSafe sharing specifics\nHere‚Äôs a couple of details if you‚Äôre wondering how managing files safely can work.\n\nIgnoring files in Git\nYou include a .gitignore file in your project that specifies intentionally untracked files and folders to ignore, so that you can include files in your project on your computer, but they don‚Äôt get put on the remote repository. It‚Äôs under your control, so yes you have responsibility here. As a simple example, include the following line in a .gitignore to ignore all .csv files, using the * wildcard:\n*.csv\n\n\nEnvironment variables\nA key piece of sensitive info are things like access keys and credentials. Unfortunately, sometimes we do have to write them down to make use of them. It‚Äôs important to make these don‚Äôt get shared, and one approach is to store them in environment variables.\nCreate the necessary variables in an environment file, then write your main script that includes accessing and using those variables1. Make sure the environment file is ignored by git, but do share the script. Document how to set up the environment variable, so that others can execute the code with their own keys/credentials."
  },
  {
    "objectID": "open_code.html#footnotes",
    "href": "open_code.html#footnotes",
    "title": "A case for Open Code",
    "section": "",
    "text": "The R-curious should look into .Renviron files and Sys.getenv().‚Ü©Ô∏é"
  }
]