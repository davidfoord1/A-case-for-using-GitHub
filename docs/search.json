[
  {
    "objectID": "index.html#what-is-github-anyway",
    "href": "index.html#what-is-github-anyway",
    "title": "A case for using GitHub",
    "section": "What is GitHub, anyway?",
    "text": "What is GitHub, anyway?\nGitHub.com and GitHub are a suite of products centered around the version control system Git. It offers:\n\nA place to store and share projects (in repositories) with complete control over who has access. It’s easy to download a copy of a project, make changes and upload a revision. It’s a back-up on the cloud.\nIt keeps a full record of changes made to the repository, including who made them and when, great for recovery, audits or just understanding how the project changed over time.\nWhen you make changes, save them and commit them to a repository, you can (and should) give a descriptive name to the change which makes it easy for others to understand what changes have been made.\nGit supports multiple branches of one project being worked on in parallel. You can work separately on features and combine them. By having a distinct final/publishing branch, say main, you can protect the quality and completeness of the output product.\nA key feature of the GitHub workflow are Pull Requests and Code Reviews. When you’re happy with a change and want it merged into the main branch, you can make a request for someone to pull/merge your own branch into main. This can then be peer reviewed by someone, who can add comments, request changes or approve and merge. This is really important, because it adds a natural step for communication and assurance into the process.\n\n\nThat sounds like a lot of extra steps just to save my work…\nWell, yes, it is. It’s saving, but more deliberate, with more quality assurance built-in, records for recovery and audit, proper support for multiple branches of work. It is a longer process; it’s a more thoughtful process; it’s a better process. Well, no it’s not even a longer process, it takes more time up front but saves a lot over the mid-to-long-term. I don’t think I can stress enough how beneficial the extra steps are.\nI’m not going to go through every reason why reproducible analytical pipeline are important, but quickly; the more manual steps like copy-pasting in a process there are, the more time it will take to complete, the more risk there will be for error, and the less scalable it will be for extending and repeating the process. It’s good to automate as much as possible, and products like GitHub go hand-in-hand with tackling these issues:\n\n\nGitHub for Reproducible Analytical Pipelines (RAP)\nFrom the NHS Digital levels of RAP framework, which sets out a list of requirements for making a good pipeline, look at the baseline points:\n\n\nCode is version controlled (see Git basics and using Git collaboratively guides).\nCode has been peer reviewed.\nCode is published in the open and linked to & from accompanying publication (if relevant).\nData produced by code in an open-source language (e.g., Python, R, SQL).\nRepository includes a README.md file (or equivalent) that clearly details steps a user must follow to reproduce the code.\n\n\nGitHub directly implements or supports all of these. As you should know by now, it implements version control, peer review and publishing code publicly. It supports working with a broad variety of languages as well as encouraging READMEs by default, presenting them as guides on repository home pages."
  },
  {
    "objectID": "index.html#thats-great-in-theory-but-what-its-like-in-practice",
    "href": "index.html#thats-great-in-theory-but-what-its-like-in-practice",
    "title": "A case for using GitHub",
    "section": "That’s great in theory, but what it’s like in practice?",
    "text": "That’s great in theory, but what it’s like in practice?\nMy team started moving some projects on to GitHub a few months ago and I am so glad that we did.\n\nNow we can safely collaborate on the same file, in ways that are not possible with OneDrive/SharePoint. It’s easy to work on something in your own branch without worrying about messing the real thing up, and then it’s easy to merge files and understand what’s actually happening.\nIntroducing code review has been a boon for learning in the team. We’re not just getting things done well enough to work. We’re getting feedback, we’re improving, we’re making things more maintainable. This comes from both getting your code reviewed and from doing the reviewing.\nCode review has also managed to catch a few mistakes before they got moved into a final product.\nIn a case where a change didn’t work, we were able to simply able to revert it.\nIt has been quick and easy to transfer files to different people and different locations like remote desktops.\n\n\nGetting to grips with the tools\nThere was a bit of learning and setting up to do to get started, but plenty of guides on how to do it. Using Git in a command line app (like Git Bash for Windows) may seem a bit intimidating, but there are graphical user interface apps like GitHub Desktop which makes things easier. It is also commonly included in IDEs like RStudio, and packages like {usethis} for R.\nOnce you get the hang of if it, there is a fairly simple and consistent rhythm of creating feature branches, making/saving/committing changes to files, pulling from the main branch and pushing to the feature branch, before submitting for review.\nIt’s easy to see where changes have been made\nWhen a commit is made the exact changes are recorded, which can be displayed in various ways, usually with a + for added lines and - for removed lines. Being so explicit with the changes is the main reason why merging different changes together is made so easy, because you know exactly what is happening.\n\n\n\nAdditions in GitHub Desktop"
  },
  {
    "objectID": "index.html#further-thoughts",
    "href": "index.html#further-thoughts",
    "title": "A case for using GitHub",
    "section": "Further thoughts",
    "text": "Further thoughts\n\nThere is a lot of support for using Git!\nThe HM Treasury Aqua Book recommends version control as the most basic quality assurance activity appropriate even for simple analysis with low business risk (see section 4.1.13 onward). The Government Analysis Function’s best practice guidance includes a Guide to Version Control with Git and a Peer Review Guide.\nSome examples of GitHub in use:\n\nNHS England GitHub\nNHS Digital GitHub\nNHS UK GitHub\nGovernment Digital Service\nONS GitHub\n\n\n\nOneDrive is not the version control you’re looking for\nHaving files reliant on Microsoft OneDrive/Sharepoint syncing and version history is risky and makes me nervous. I’ve seen files be deleted at random fairly regularly.\nWriting code includes things like installing code packages, lots of small files to contribute to a project and OneDrive will try to sync them. It’s not unusual to see it whirring away trying to process thousands of changes and painfully slowing things down.\nAutosave is great for emergency recovery on a crash, but the history is no good for more precise recovery and reversion. It does mean you don’t have to worry about forgetting to save, but that’s about as far as it goes, and as already discussed, deliberate and described changes are good practice.\n\n\nOther GitHub features\n\nSharing repository templates to get started quickly with good-quality standard project structure.\nGlobal collaboration and social networking. See how other people have built their projects, perhaps how others have approached something you want to do. You can invite others to look at your code and get feedback for making improvements.\nIt’s not just for developers, it’s a great way of distributing files, including scripts to be run and it’s also great to have version control for standard documents."
  },
  {
    "objectID": "open_code.html#why-publish-your-code",
    "href": "open_code.html#why-publish-your-code",
    "title": "A case for Open Code",
    "section": "Why publish your code?",
    "text": "Why publish your code?\nFrom the NHS Digital RAP Community of practice:\n\nThe Government’s Digital Service Standard 12th principle states that all publicly funded code should be open, reusable and available under appropriate licences. The main benefits of publishing your code are:\n\nIt increases transparency on NHS work. This can include publication/dashboard methodologies, but also code ownership.\nIt increases collaboration and knowledge sharing across cross-department teams, external users and developers. No time is wasted on requesting permissions or access to code repositories.\nEasier to share and align on standards across the health sector.\nKnowing that your code will be published will lead to your overall code health increasing as analysts and developers will take greater care in ensuring best coding practices and standards are applied.\nReduce burden by sharing and reusing code. Internal and external users can learn from your code repositories and templates, and apply it to their work or personal projects."
  },
  {
    "objectID": "open_code.html#what-about-security",
    "href": "open_code.html#what-about-security",
    "title": "A case for Open Code",
    "section": "What about security?",
    "text": "What about security?\nGovernment guidance on when code should be open or closed:\n\nClosed code\nYou should keep some data and code closed, including:\n\nkeys and credentials\nalgorithms used to detect fraud\nunreleased policy\n\n\n\nOpen code\nYou should open all other code. This includes:\n\nconfiguration code\ndatabase schema\nsecurity-enforcing code"
  },
  {
    "objectID": "open_code.html#other",
    "href": "open_code.html#other",
    "title": "A case for Open Code",
    "section": "Other",
    "text": "Other\nOffice of National Statistics guidance on Coding in the Open reiterates the NHS Digital position."
  }
]