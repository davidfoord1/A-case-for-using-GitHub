A(nother) case for using GitHub, from the perspective of an NHS England Cancer analyst.

## What is GitHub, anyway? {.unnumbered}

[GitHub.com](https://github.com/) and GitHub are a suite of products centered around the **version control system** [Git](https://www.bing.com/ck/a?!&&p=d931a2ebfd59a00eJmltdHM9MTcwMTgyMDgwMCZpZ3VpZD0xYTFjOTJhOC00Y2I2LTZkZDctMGY1ZS04MDZkNGQwZDZjNzYmaW5zaWQ9NTUyNQ&ptn=3&ver=2&hsh=3&fclid=1a1c92a8-4cb6-6dd7-0f5e-806d4d0d6c76&psq=git&u=a1aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM&ntb=1). It offers:

-   A place to store and share projects (in repositories) with complete control over who has access. It's easy to download a copy of a project, make changes and upload a revision. It's a back-up on the cloud.

-   It keeps a full record of changes made to the repository, including who made them and when, great for recovery, audits or just understanding how the project changed over time.

-   When you make changes, save them and commit them to a repository, you can (and should) give a descriptive name to the change which makes it easy for others to understand what changes have been made.

-   Git supports multiple branches of one project being worked on in parallel. You can work separately on features and combine them. By having a distinct final/publishing branch, say `main`, you can protect the quality and completeness of the output product.

-   A key feature of the GitHub workflow are **Pull Requests** and **Code Reviews**. When you're happy with a change and want it merged into the `main` branch, you can make a request for someone to pull/merge your own branch into `main`. This can then be peer reviewed by someone, who can add comments, request changes or approve and merge. This is really important, because it adds a natural step for communication and assurance into the process.

### That sounds like a lot of extra steps just to save my work...

Well, yes, it is. It's saving, but more deliberate, with more quality assurance built-in, records for recovery and audit, proper support for multiple branches of work. It is a longer process; it's a more thoughtful process; it's a better process. Well, no it's not even a longer process, it takes more time up front but saves a lot over the mid-to-long-term. I don't think I can stress enough how beneficial the extra steps are.

I'm not going to go through every reason [why reproducible analytical pipeline are important](https://nhsdigital.github.io/rap-community-of-practice/introduction_to_RAP/why_RAP_is_important/), but quickly; the more manual steps like copy-pasting in a process there are, the more time it will take to complete, the more risk there will be for error, and the less scalable it will be for extending and repeating the process. It's good to automate as much as possible, and products like GitHub go hand-in-hand with tackling these issues:

### GitHub for Reproducible Analytical Pipelines (RAP)

From the NHS Digital [levels of RAP framework](https://nhsdigital.github.io/rap-community-of-practice/introduction_to_RAP/levels_of_RAP/), which sets out a list of requirements for making a good pipeline, look at the *baseline* points:

> -   Code is version controlled (see [Git basics](https://nhsdigital.github.io/rap-community-of-practice/training_resources/git/introduction-to-git/) and [using Git collaboratively](https://nhsdigital.github.io/rap-community-of-practice/training_resources/git/using-git-collaboratively/) guides).
>
> -   Code has been [peer reviewed](https://nhsdigital.github.io/rap-community-of-practice/implementing_RAP/code-review/).
>
> -   Code is [published in the open](https://nhsdigital.github.io/rap-community-of-practice/implementing_RAP/how-to-publish-your-code-in-the-open/) and linked to & from accompanying publication (if relevant).
>
> -   Data produced by code in an open-source language (e.g., Python, R, SQL).
>
> -   Repository includes a README.md file (or equivalent) that clearly details steps a user must follow to reproduce the code.

**GitHub directly implements or supports all of these**. As you should know by now, it implements version control, peer review and publishing code publicly. It supports working with a broad variety of languages as well as encouraging READMEs by default, presenting them as guides on repository home pages.

## That's great in theory, but what it's like in practice?

My team started moving some projects on to GitHub a few months ago and I am so glad that we did.

-   Now we can safely collaborate on the same file, in ways that are not possible with OneDrive/SharePoint. It's easy to work on something in your own branch without worrying about messing the real thing up, and then it's easy to merge files and understand what's actually happening.

-   Introducing **code review has been a boon for learning** in the team. We're not just getting things done well enough to work. We're getting feedback, we're improving, we're making things more maintainable. This comes from both getting your code reviewed and from doing the reviewing.

-   Code review has also managed to catch a few mistakes before they got moved into a final product.

-   In a case where a change didn't work, we were able to simply able to revert it.

-   It has been quick and easy to transfer files to different people and different locations like remote desktops.

### Getting to grips with the tools

There was a bit of learning and setting up to do to get started, but plenty of guides on how to do it. Using Git in a command line app (like Git Bash for Windows) may seem a bit intimidating, but there are graphical user interface apps like GitHub Desktop which makes things easier. It is also commonly included in IDEs like RStudio, and packages like [{usethis}](https://usethis.r-lib.org/reference/index.html#git-and-github) for R.

Once you get the hang of if it, there is a fairly simple and consistent rhythm of creating feature branches, making/saving/committing changes to files, pulling from the main branch and pushing to the feature branch, before submitting for review.

**It's easy to see where changes have been made**

When a commit is made the exact changes are recorded, which can be displayed in various ways, usually with a `+` for added lines and `-` for removed lines. Being so explicit with the changes is the main reason why merging different changes together is made so easy, because you know exactly what is happening.

![Additions in GitHub Desktop](images/git_additions.PNG){fig-align="left" width="600"}

## Further thoughts

### There is a lot of support for using Git!

The HM Treasury [Aqua Book](https://assets.publishing.service.gov.uk/media/5a7f3bb8e5274a2e87db49be/aqua_book_final_web.pdf "guidance on producing quality analysis for government") recommends version control as the most basic quality assurance activity appropriate even for simple analysis with low business risk (see section 4.1.13 onward). The Government Analysis Function's best practice guidance includes a [Guide to Version Control with Git](https://best-practice-and-impact.github.io/qa-of-code-guidance/version_control.html#) and a [Peer Review Guide](https://best-practice-and-impact.github.io/qa-of-code-guidance/version_control.html).

Some examples of GitHub in use:

-   [NHS England GitHub](https://github.com/nhsengland)

-   [NHS Digital GitHub](https://github.com/nhsdigital)

-   [NHS UK GitHub](https://github.com/nhsuk)

-   [Government Digital Service](https://github.com/alphagov)

-   [ONS GitHub](https://github.com/ONSdigital)

### OneDrive is not the version control you're looking for

Having files reliant on Microsoft OneDrive/Sharepoint syncing and version history is risky and makes me nervous. I've seen files be deleted at random fairly regularly.

Writing code includes things like installing code packages, lots of small files to contribute to a project and OneDrive will try to sync them. It's not unusual to see it whirring away trying to process thousands of changes and painfully slowing things down. 

Autosave is great for emergency recovery on a crash, but the history is no good for more precise recovery and reversion. It does mean you don't have to worry about forgetting to save, but that's about as far as it goes, and as already discussed, deliberate and described changes are good practice.

### Other GitHub features

-   Sharing repository templates to get started quickly with good-quality standard project structure.

-   Global collaboration and social networking. See how other people have built their projects, perhaps how others have approached something you want to do. You can invite others to look at your code and get feedback for making improvements.

-   It's not just for developers, it's a great way of distributing files, including scripts to be run and it's also great to have version control for standard documents.
